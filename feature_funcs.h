#ifndef FEATURE_FUNCS
#define FEATURE_FUNCS

#include <stdlib.h>
#include <string>
#include <sstream>
#include <assert.h>
#include <stdint.h>
#include <time.h>
#include <stdio.h>
#include <iostream>
#include <vector>
#include <cmath>
#include <fstream>

#include "gostate.h"


class FeatureFuncs {
public :
    //take a GoState and fill the 'features' array.
    //The features array represenets 'nfeatures' DIMENSIONxDIMENSION boards
    //It is layed out linearly in row-major order (use featureIX to help
    //w/ indexing)
    static void setBinaryFeatures( GoState* gs, int* features, int nfeatures);


    //input_board and output_board both represent DIM x DIM boards.
    //Marks the positions in output_board that are edges in input_board
    //TODO: tweak to be float* -> float*
    static void setEdges( int* input_board, int* output_board );

    //helper for gaussian kernling
    static void board2csv( float* board, int size, int width, string filename );
    
    //return man dist to <friend,foe>
    static pair<int,int> getManhattanDistPair( GoState* gs, int ix );

private :

    //Take the feature number and the ix into a BIGDIMxBIGDIM board in
    //row-major order.  Outputs the correct spot in the 'features' array
    static int featureIX( int feature, int ix );
    
    //to_fill is an int[8] that gets filled with the neighbors of ix in board
    //offboards are -1, otherwise neighbors are 0 or 1
    static void neighborValues( int* to_fill, int* board, int ix );

    /*bool inHorizontalEdge( int* input_board, int ix );*/
    /*bool inVerticalEdge( int* input_board, int ix );*/

    //takes a pattern and an input array 'neighbors' (generated by 
    //neighborValues). Returns whether there is an acceptable match
    //TODO: return a float
    //TODO: encapsulate the pattern array into a class?  And have neighbor
    //values return one of those instead?
    static bool matchesPattern( int* neighbors, int* pattern );
    

    static int getSide( int ix );
};


#endif
